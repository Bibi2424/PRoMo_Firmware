# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	- File automatically-generated by tool: [projectgenerator] version: [2.30.0] date: [Fri Oct 26 20:18:00 EDT 2018] 
# 	- Modify by Bibi 2018/11/04: Add flash, Use generic path for gcc and HAL, remove Src and Inc dir
# ------------------------------------------------

######################################
# target
######################################
TARGET = PRoMo

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

#######################################
# paths
#######################################
# Build path
BUILD_DIR = ../_build
# GCC toolchain path
GCC_PATH = "C:/Program Files (x86)/GNU Tools Arm Embedded/7 2018-q2-update/bin/"
# STM32 HAL librairies
STM32_LIBRAIRIES_PATH = C:/Users/Bibi/STM32Cube/Repository/STM32Cube_FW_F4_V1.21.0/Drivers
STM32_LIBRAIRIES_SRC = $(STM32_LIBRAIRIES_PATH)/STM32F4xx_HAL_Driver/Src
STM32_LIBRAIRIES_INC = $(STM32_LIBRAIRIES_PATH)/STM32F4xx_HAL_Driver/Inc
# STL-Link Flasher Path
STM32_FLASHER_EXEC := "C:/Program Files (x86)/STMicroelectronics/STM32 ST-LINK Utility/ST-LINK Utility/"

######################################
# source
######################################
# C sources
vpath %.c $(STM32_LIBRAIRIES_SRC)
# vpath %.c $(STM32_LIBRAIRIES_SRC) ../lib/test

C_SOURCES = main.c
C_SOURCES += stm32f4xx_it.c
C_SOURCES += system_stm32f4xx.c
C_SOURCES += gpio.c
C_SOURCES += usart.c
C_SOURCES += syscalls.c
C_SOURCES += encoder.c
C_SOURCES += motor.c
C_SOURCES += process_serial_commands.c
C_SOURCES += test.c
C_SOURCES += stm32f4xx_ll_gpio.c
C_SOURCES += stm32f4xx_ll_usart.c
C_SOURCES += stm32f4xx_ll_tim.c
C_SOURCES += stm32f4xx_ll_dma.c
C_SOURCES += stm32f4xx_ll_rcc.c
C_SOURCES += stm32f4xx_ll_utils.c
C_SOURCES += stm32f4xx_ll_exti.c

# ASM sources
ASM_SOURCES =  \
startup_stm32f411xe.s

# AS includes
AS_INCLUDES = 

INCS  = .
# INCS += ../lib/test
INCS += $(STM32_LIBRAIRIES_INC)
INCS += $(STM32_LIBRAIRIES_PATH)/CMSIS/Device/ST/STM32F4xx/Include
INCS += $(STM32_LIBRAIRIES_PATH)/CMSIS/Include
# directories to be searched for header files
C_INCLUDES = $(addprefix -I,$(INCS))

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DSTM32F411xE \
-DUSE_FULL_LL_DRIVER \
-DHSE_VALUE=8000000 \
-DHSE_STARTUP_TIMEOUT=100 \
-DLSE_STARTUP_TIMEOUT=5000 \
-DLSE_VALUE=32768 \
-DEXTERNAL_CLOCK_VALUE=12288000 \
-DHSI_VALUE=16000000 \
-DLSI_VALUE=32000 \
-DVDD_VALUE=3300 \
-DPREFETCH_ENABLE=1 \
-DINSTRUCTION_CACHE_ENABLE=1 \
-DDATA_CACHE_ENABLE=1


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F411RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
OBJECTS  = $(C_SOURCES:.c=.o)
OBJECTS += $(ASM_SOURCES:.s=.o)
# OBJECTS := $(OBJECTS:.s=.o)
OBJECTS := $(addprefix $(BUILD_DIR)/,$(OBJECTS))

DEPS := $(patsubst %.o, %.d, $(OBJECTS))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	@echo "   [CC]" $<
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "   [AS]" $<
	@$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "   [LD]" $@
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo "   [SIZE]"
	@$(SZ) $@
	@echo ""

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "   [CP]" $@
	@$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "   [CP]" $@
	@$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# flash
#######################################
# flash: all
flash: $(BUILD_DIR)/$(TARGET).hex | $(BUILD_DIR)
	@$(STM32_FLASHER_EXEC)ST-LINK_CLI.exe -c -P $< 0x08000000 -Rst

#######################################
# dependencies
#######################################
-include $(DEPS)

# *** EOF ***
